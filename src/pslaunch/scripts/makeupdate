#!/bin/bash

TOPDIR=$PWD
OUTPUTDIR=$TOPDIR/updatefiles
REPO=$TOPDIR/repo
VERSION=$1
OLDPATH=$TOPDIR/old
NEWPATH=$TOPDIR/new
XD3PATH=$TOPDIR/xdelta3
MIRRORS=$TOPDIR/mirrors
UPDATERNAME=psupdater

function generatedeleted {
local madedir=0
if [ ! -d $NEWPATH/$1 ]
 then
    mkdir $NEWPATH/$1
    madedir=1
fi
for i in $(ls .);
do
  if [ -d $i ]
  then
    cd $i
    generatedeleted $1$i"/"
    cd ..
    continue
  fi
  removed=1
  for j in $(ls $NEWPATH/$1);
  do
    if [ "$i" == "$j" ]
    then
      removed=0
    fi
  done
  if [ $removed -eq 1 ]
  then
    echo "    <deleted name=\""$1$i"\" />" >> $OUTPUTDIR/deletedfiles.xml
  fi
done
if [ $madedir -eq 1 ]
then
  rmdir $NEWPATH/$1
fi
}

function generatenew {
if [ ! -d $OUTPUTDIR/$1 ]
then
  mkdir $OUTPUTDIR/$1
fi
local madeoldpath=0
if [ ! -d $OLDPATH/$1 ]
then
  mkdir $OLDPATH/$1
  madeoldpath=1
fi
for i in $(ls .);
do
  if [ -d $i ]
  then
    cd $i
    generatenew $1$i"/"
    cd ..
    continue
  fi
  new=1
  for j in $(ls $OLDPATH/$1);
  do
    if [ $i == $j ]
    then
      new=0
    fi
  done
  if [ $new == 1 ]
  then
    EXEC=false
    if [ -x $NEWPATH/$1$i ]
    then
      EXEC=true
    fi
    echo "    <newfile name=\""$1$i"\" exec=\""$EXEC"\" />" >> $OUTPUTDIR/newfiles.xml
    cp $NEWPATH/$1$i $OUTPUTDIR/$1$i
  fi
done
if [ $madeoldpath -eq 1 ]
then
  rmdir $OLDPATH/$1
fi
}

function generatechanged {
local madedir=0
if [ ! -d $NEWPATH/$1 ]
then
  mkdir $NEWPATH/$1
  madedir=1
fi
for i in $(ls .);
do
  if [ -d $i ]
  then
    cd $i
    generatechanged $1$i"/"
    cd ..
    continue
  fi
  for j in $(ls $NEWPATH/$1);
  do
    if [ $i != $j ]
    then
      continue
    fi
    md5sum1=$(md5sum $i)
    md5sum2=$(md5sum $NEWPATH/$1$j)
    if [ ${md5sum1% $i} != ${md5sum2% $NEWPATH/$1$j} ]
    then
      path=$1$i
      filemd5sum=${md5sum2% $NEWPATH/$1$j}
      read filemd5sum <<< "$filemd5sum"
      echo "    <changedfile filepath=\""$1$i"\" diff=\""${path%.*}".vcdiff\" md5sum=\""$filemd5sum"\" />" >> $OUTPUTDIR/changedfiles.xml
      if [ ! -d $OUTPUTDIR"/"$1 ]
      then
        mkdir $OUTPUTDIR"/"$1
      fi
      $XD3PATH -f -e -9 -s $i $NEWPATH/$1$j $OUTPUTDIR/${path%.*}".vcdiff"
      break;
    else
      break;
    fi
  done
done
if [ $madedir -eq 1 ]
then
  rmdir $NEWPATH/$1
fi
}

function generateupdaterinfo {
echo "<config>" > $REPO/updaterinfo.xml
echo "    <mirrors>" >> $REPO/updaterinfo.xml
if [ -e $MIRRORS ]
then
  exec < $MIRRORS
  while read line
  do
    echo "        "$line >> $REPO/updaterinfo.xml
  done
fi
echo "    </mirrors>" >> $REPO/updaterinfo.xml

UPDATER_VERSION=$(wget -q -O - 'http://planeshift.svn.sourceforge.net/viewvc/*checkout*/planeshift/trunk/src/pslaunch/updaterengine.h' | grep '^#define UPDATER_VERSION' | sed 's/^#define UPDATER_VERSION \([0-9]*\).*$/\1/g')
md5win32updater=$(md5sum $REPO"/"$UPDATERNAME"win32.zip")
md5win32updater=${md5win32updater% $REPO"/"$UPDATERNAME"win32.zip"}
read md5win32updater<<< "$md5win32updater"
md5lin32updater=$(md5sum $REPO"/"$UPDATERNAME"linux32.zip")
md5lin32updater=${md5lin32updater% $REPO"/"$UPDATERNAME"linux32.zip"}
read md5lin32updater<<< "$md5lin32updater"
md5lin64updater=$(md5sum $REPO"/"$UPDATERNAME"linux64.zip")
md5lin64updater=${md5lin64updater% $REPO"/"$UPDATERNAME"linux64.zip"}
read md5lin64updater<<< "$md5lin64updater"
md5osxupdater=$(md5sum $REPO"/"$UPDATERNAME"macosx.zip")
md5osxupdater=${md5osxupdater% $REPO"/"$UPDATERNAME"macosx.zip"}
read md5osxupdater<<< "$md5osxupdater"
echo "    <updater version=\""$UPDATER_VERSION"\" md5win32=\""$md5win32updater"\" md5linux32=\""$md5lin32updater"\" md5linux64=\""$md5lin64updater"\" md5macosx=\""$md5osxupdater"\" />" >> $REPO/updaterinfo.xml

echo "    <client>" >> $REPO/updaterinfo.xml
if [ -d $REPO"_backup" ]
then
  copy=0
  exec < $REPO"_backup/updaterinfo.xml"
  while read line
  do
    if [ "$line" == "<client>" ]
    then
      copy=1
    elif [ "$line" == "</client>" ]
    then
      copy=0
    elif [ $copy -eq 1 ]
    then
      echo "        "$line >> $REPO/updaterinfo.xml
    fi
  done
fi
md5win32=$(md5sum $REPO"/win32-"$VERSION".zip")
md5win32=${md5win32% $REPO"/win32-"$VERSION".zip"}
read md5win32<<< "$md5win32"
md5lin32=$(md5sum $REPO"/linux32-"$VERSION".zip")
md5lin32=${md5lin32% $REPO"/linux32-"$VERSION".zip"}
read md5lin32<<< "$md5lin32"
md5lin64=$(md5sum $REPO"/linux64-"$VERSION".zip")
md5lin64=${md5lin64% $REPO"/linux64-"$VERSION".zip"}
read md5lin64<<< "$md5lin64"
md5osx=$(md5sum $REPO"/macosx-"$VERSION".zip")
md5osx=${md5osx% $REPO"/macosx-"$VERSION".zip"}
read md5osx<<< "$md5osx"
echo "        <version name=\""$VERSION"\" md5win32=\""$md5win32"\" md5linux32=\""$md5lin32"\" md5linux64=\""$md5lin64"\" md5macosx=\""$md5osx"\" />" >> $REPO/updaterinfo.xml
echo "    </client>" >> $REPO/updaterinfo.xml
echo "</config>" >> $REPO/updaterinfo.xml
}

function createupdate {
if [ -d $OUTPUTDIR ]
then
  rm -R $OUTPUTDIR
fi
mkdir $OUTPUTDIR

echo "Checking for deleted files."
echo "<deletedfiles>" > $OUTPUTDIR/deletedfiles.xml
cd $OLDPATH
generatedeleted
cd $TOPDIR
echo "</deletedfiles>" >> $OUTPUTDIR/deletedfiles.xml

echo "Checking for new files."
echo "<newfiles>" > $OUTPUTDIR/newfiles.xml
cd $NEWPATH
generatenew
cd $TOPDIR
echo "</newfiles>" >> $OUTPUTDIR/newfiles.xml

echo "Checking for changed files."
echo "<changedfiles>" > $OUTPUTDIR/changedfiles.xml
cd $OLDPATH
generatechanged
cd $TOPDIR
echo "</changedfiles>" >> $OUTPUTDIR/changedfiles.xml
}

# Check for version
if [ ! $VERSION ]
then
  echo "You must enter a version for the update."
  echo "So you'd enter \"./makeupdate 1.5.23\" for version 1.5.23"
  exit
fi

# Create repository.
if [ ! -d $REPO ]
then
  mkdir $REPO
else
  # Create backup.
  if [ -d $REPO"_backup" ]
  then
    rm -R $REPO"_backup"
  fi
  mv $REPO $REPO"_backup"
  mkdir $REPO
  # Restore old update files from the backup.
  cd $REPO"_backup"
  cp $(ls | grep -v backup) $REPO
  cd $TOPDIR
fi

# Move new 'backup' download files to the repo.
cp -R $NEWPATH $REPO/backup

# Move platform specific files out of 'new' and 'old'
mkdir platform
mkdir platform/new
mkdir platform/old
mv $NEWPATH/win32 platform/new/win32
mv $NEWPATH/linux32 platform/new/linux32
mv $NEWPATH/osx platform/new/osx
mv $NEWPATH/linux64 platform/new/linux64
mv $OLDPATH/win32 platform/old/win32
mv $OLDPATH/linux32 platform/old/linux32
mv $OLDPATH/osx platform/old/osx
mv $OLDPATH/linux64 platform/old/linux64
find $TOPDIR/platform/ -name .svn -print | xargs rm -Rf

echo "Creating 32-bit Linux update."
cd platform/new/linux32
zip -9 $REPO/psupdaterlinux32.zip $UPDATERNAME".bin" $UPDATERNAME
cd $TOPDIR
cp -R platform/old/linux32/* $OLDPATH
cp -R platform/new/linux32/* $NEWPATH
if [ -e $OLDPATH/$UPDATERNAME ]
then
rm $OLDPATH/$UPDATERNAME
fi
if [ -e $OLDPATH/$UPDATERNAME".bin" ]
then
  rm $OLDPATH/$UPDATERNAME".bin"
fi
rm $NEWPATH/$UPDATERNAME $NEWPATH/$UPDATERNAME".bin"
createupdate
cd $OUTPUTDIR
zip -r -9 $REPO/linux32-"$VERSION".zip *
cd $OLDPATH
rm -Rf $(ls $TOPDIR/platform/old/linux32/)
cd $NEWPATH
rm -Rf $(ls $TOPDIR/platform/new/linux32/)
cd $TOPDIR

echo "Creating 64-bit Linux update."
cd platform/new/linux64
zip -9 $REPO/psupdaterlinux64.zip $UPDATERNAME".bin" $UPDATERNAME
cd $TOPDIR
cp -R platform/old/linux64/* $OLDPATH
cp -R platform/new/linux64/* $NEWPATH
if [ -e $OLDPATH/$UPDATERNAME ]
then
  rm $OLDPATH/$UPDATERNAME
fi
if [ -e $OLDPATH/$UPDATERNAME".bin" ]
then
  rm $OLDPATH/$UPDATERNAME".bin"
fi
rm $NEWPATH/$UPDATERNAME $NEWPATH/$UPDATERNAME".bin"
createupdate
cd $OUTPUTDIR
zip -r -9 $REPO/linux64-"$VERSION".zip *
cd $OLDPATH
rm -Rf $(ls $TOPDIR/platform/old/linux64/)
cd $NEWPATH
rm -fR $(ls $TOPDIR/platform/new/linux64/)
cd $TOPDIR

echo "Creating OSX update."
cd platform/new/osx
zip -r -9 $REPO/psupdatermacosx.zip $UPDATERNAME".app"
cd $TOPDIR
cp -R platform/old/osx/* $OLDPATH
cp -R platform/new/osx/* $NEWPATH
if [ -d $OLDPATH/$UPDATERNAME".app" ]
then
  rm -Rf $OLDPATH/$UPDATERNAME".app"
fi
rm -Rf $NEWPATH/$UPDATERNAME".app"
createupdate
cd $OUTPUTDIR
zip -r -9 $REPO/macosx-"$VERSION".zip *
cd $OLDPATH
rm -Rf $(ls $TOPDIR/platform/old/osx/)
cd $NEWPATH
rm -Rf $(ls $TOPDIR/platform/new/osx/)
cd $TOPDIR

echo "Creating Windows update."
cd platform/new/win32
zip -9 $REPO/psupdaterwin32.zip $UPDATERNAME".exe" libcurl.dll
cd $TOPDIR
cp -R platform/old/win32/* $OLDPATH
cp -R platform/new/win32/* $NEWPATH
if [ -e $OLDPATH/$UPDATERNAME".exe" ]
then
  rm $OLDPATH/$UPDATERNAME".exe"
fi
rm $OLDPATH/libcurl.dll
rm $NEWPATH/$UPDATERNAME".exe" $NEWPATH/libcurl.dll
createupdate
cd $OUTPUTDIR
zip -r -9 $REPO/win32-"$VERSION".zip *
cd $OLDPATH
rm -Rf $(ls $TOPDIR/platform/old/win32/ | grep -v $UPDATERNAME".exe")
cd $NEWPATH
rm -Rf $(ls $TOPDIR/platform/new/win32/ | grep -v $UPDATERNAME".exe")
cd $TOPDIR

# Restore platform files and clean up.
mv platform/new/win32 $NEWPATH/win32
mv platform/new/linux32 $NEWPATH/linux32
mv platform/new/osx $NEWPATH/osx
mv platform/new/linux64 $NEWPATH/linux64
mv platform/old/win32 $OLDPATH/win32
mv platform/old/linux32 $OLDPATH/linux32
mv platform/old/osx $OLDPATH/osx
mv platform/old/linux64 $OLDPATH/linux64
rm -Rf platform
rm -Rf updatefiles

# Generate updaterinfo.xml
generateupdaterinfo

echo "Done!"
